name: 'Version Updater'
description: 'Update the version in a specified file based on the type of version bump'


inputs:
  file:
    description: 'Path to the file containing the version'
    required: true
  version-key:
    description: 'The key or pattern to identify the version in the file'
    required: true
    default: 'version'
  bump-type:
    description: 'The type of version bump: major, minor, or patch'
    required: true
    default: 'patch'
runs:
  using: 'composite'

  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure Git
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
      shell: bash

    - name: Get Version
      id: get_version
      run: |
          FILE_PATH="${{ inputs.file }}"
          VERSION_KEY="${{ inputs.version-key }}"
          
          sudo apt-get update && sudo apt-get install -y jq
          VERSION=$(jq -r ".${VERSION_KEY}" "$FILE_PATH")
          if [ -z "$VERSION" ]; then
            echo "No se pudo obtener la versión desde $FILE_PATH con la clave $VERSION_KEY"
            exit 1
          fi
        
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "::set-output name=version::${VERSION}"
      shell: bash

    - name: Print Version
      run: echo "The current version is ${{ env.VERSION }}"
      shell: bash

    - name: Bump Version
      id: bump_version
      run: |
        BUMP_TYPE="${{ inputs.bump-type }}"
        echo "El tipo de actualización de versión es $BUMP_TYPE"
        
        if [ -z "$BUMP_TYPE" ]; then
          echo "No se especificó el tipo de incremento de versión"
          exit 1
        elif [ "$BUMP_TYPE" != "major" ] && [ "$BUMP_TYPE" != "minor" ] && [ "$BUMP_TYPE" != "patch" ]; then
          echo "El tipo de incremento de versión debe ser major, minor o patch"
          exit 1
        fi
        
        VERSION="${{ env.VERSION }}"
        IFS='.' read -r major minor patch <<< "$VERSION"
        case "$BUMP_TYPE" in
          major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            ;;
          patch)
            patch=$((patch + 1))
            ;;
        esac

        NEW_VERSION="${major}.${minor}.${patch}"
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
        echo "La nueva versión es $NEW_VERSION"
      shell: bash
    
    - name: Print New Version
      run: echo "The new version is ${{ env.NEW_VERSION }}"
      shell: bash

    - name: Update Version
      run: |
        version_key="${{ inputs.version-key }}"
        new_version="${{ env.NEW_VERSION }}"
        echo "Updating version from ${{ inputs.version-key }} to $new_version in ${{ inputs.file }}"
        jq ".$version_key = \"$new_version\"" "${{ inputs.file }}" > temp.json
        mv temp.json "${{ inputs.file }}"
        git add "${{ inputs.file }}"
        git commit -m "chore: bump version to $new_version"
        git pull origin ${{ github.ref }}
        git push origin ${{ github.ref }}
        echo "Version updated successfully"
        
      shell: bash